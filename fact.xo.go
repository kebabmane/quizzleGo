// Package quizzle-go contains the types for schema 'public'.
package quizzle-go

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/csv"
	"errors"
	"fmt"
	"regexp"
	"strings"
	"time"
)

// Fact represents a row from 'public.fact'.
type Fact struct {
	ID int `json:"id"` // id
	Factstring sql.NullString `json:"factstring"` // factstring
	Displayed sql.NullBool `json:"displayed"` // displayed

	// xo fields
	_exists, _deleted bool

}


// Exists determines if the Fact exists in the database.
func (f *Fact) Exists() bool {
	return f._exists
}

// Deleted provides information if the Fact has been deleted from the database.
func (f *Fact) Deleted() bool {
	return f._deleted
}

// Insert inserts the Fact to the database.
func (f *Fact) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}


	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.fact (` +
		`factstring, displayed` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, f.Factstring, f.Displayed)
	err = db.QueryRow(sqlstr, f.Factstring, f.Displayed).Scan(&f.ID)
	if err != nil {
		return err
	}


	// set existence
	f._exists = true

	return nil
}


	// Update updates the Fact in the database.
	func (f *Fact) Update(db XODB) error {
		var err error

		// if doesn't exist, bail
		if !f._exists {
			return errors.New("update failed: does not exist")
		}

		// if deleted, bail
		if f._deleted {
			return errors.New("update failed: marked for deletion")
		}

		// sql query
		const sqlstr = `UPDATE public.fact SET (` +
			`factstring, displayed` +
			`) = ( ` +
			`$1, $2` +
			`) WHERE id = $3`

		// run query
		XOLog(sqlstr, f.Factstring, f.Displayed, f.ID)
		_, err = db.Exec(sqlstr, f.Factstring, f.Displayed, f.ID)
		return err
	}

	// Save saves the Fact to the database.
	func (f *Fact) Save(db XODB) error {
		if f.Exists() {
			return f.Update(db)
		}

		return f.Insert(db)
	}

	// Upsert performs an upsert for Fact.
	//
	// NOTE: PostgreSQL 9.5+ only
	func (f *Fact) Upsert(db XODB) error {
		var err error

		// if already exist, bail
		if f._exists {
			return errors.New("insert failed: already exists")
		}

		// sql query
		const sqlstr = `INSERT INTO public.fact (` +
			`id, factstring, displayed` +
			`) VALUES (` +
			`$1, $2, $3` +
			`) ON CONFLICT (id) DO UPDATE SET (` +
			`id, factstring, displayed` +
			`) = (` +
			`EXCLUDED.id, EXCLUDED.factstring, EXCLUDED.displayed` +
			`)`

		// run query
		XOLog(sqlstr, f.ID, f.Factstring, f.Displayed)
		_, err = db.Exec(sqlstr, f.ID, f.Factstring, f.Displayed)
		if err != nil {
			return err
		}

		// set existence
		f._exists = true

		return nil
}


// Delete deletes the Fact from the database.
func (f *Fact) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return nil
	}

	// if deleted, bail
	if f._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.fact WHERE id = $1`

	// run query
	XOLog(sqlstr, f.ID)
	_, err = db.Exec(sqlstr, f.ID)
	if err != nil {
		return err
	}

	// set deleted
	f._deleted = true

	return nil
}

// Fact represents a row from 'public.facts'.
type Fact struct {
	ID int `json:"id"` // id
	Factstring sql.NullString `json:"factstring"` // factstring
	Displayed sql.NullBool `json:"displayed"` // displayed

	// xo fields
	_exists, _deleted bool

}


// Exists determines if the Fact exists in the database.
func (f *Fact) Exists() bool {
	return f._exists
}

// Deleted provides information if the Fact has been deleted from the database.
func (f *Fact) Deleted() bool {
	return f._deleted
}

// Insert inserts the Fact to the database.
func (f *Fact) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}


	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.facts (` +
		`factstring, displayed` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, f.Factstring, f.Displayed)
	err = db.QueryRow(sqlstr, f.Factstring, f.Displayed).Scan(&f.ID)
	if err != nil {
		return err
	}


	// set existence
	f._exists = true

	return nil
}


	// Update updates the Fact in the database.
	func (f *Fact) Update(db XODB) error {
		var err error

		// if doesn't exist, bail
		if !f._exists {
			return errors.New("update failed: does not exist")
		}

		// if deleted, bail
		if f._deleted {
			return errors.New("update failed: marked for deletion")
		}

		// sql query
		const sqlstr = `UPDATE public.facts SET (` +
			`factstring, displayed` +
			`) = ( ` +
			`$1, $2` +
			`) WHERE id = $3`

		// run query
		XOLog(sqlstr, f.Factstring, f.Displayed, f.ID)
		_, err = db.Exec(sqlstr, f.Factstring, f.Displayed, f.ID)
		return err
	}

	// Save saves the Fact to the database.
	func (f *Fact) Save(db XODB) error {
		if f.Exists() {
			return f.Update(db)
		}

		return f.Insert(db)
	}

	// Upsert performs an upsert for Fact.
	//
	// NOTE: PostgreSQL 9.5+ only
	func (f *Fact) Upsert(db XODB) error {
		var err error

		// if already exist, bail
		if f._exists {
			return errors.New("insert failed: already exists")
		}

		// sql query
		const sqlstr = `INSERT INTO public.facts (` +
			`id, factstring, displayed` +
			`) VALUES (` +
			`$1, $2, $3` +
			`) ON CONFLICT (id) DO UPDATE SET (` +
			`id, factstring, displayed` +
			`) = (` +
			`EXCLUDED.id, EXCLUDED.factstring, EXCLUDED.displayed` +
			`)`

		// run query
		XOLog(sqlstr, f.ID, f.Factstring, f.Displayed)
		_, err = db.Exec(sqlstr, f.ID, f.Factstring, f.Displayed)
		if err != nil {
			return err
		}

		// set existence
		f._exists = true

		return nil
}


// Delete deletes the Fact from the database.
func (f *Fact) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return nil
	}

	// if deleted, bail
	if f._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.facts WHERE id = $1`

	// run query
	XOLog(sqlstr, f.ID)
	_, err = db.Exec(sqlstr, f.ID)
	if err != nil {
		return err
	}

	// set deleted
	f._deleted = true

	return nil
}

// FactByID retrieves a row from 'public.fact' as a Fact.
//
// Generated from index 'fact_pkey'.
func FactByID(db XODB, id int) (*Fact, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, factstring, displayed ` +
		`FROM public.fact ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	f := Fact{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&f.ID, &f.Factstring, &f.Displayed)
	if err != nil {
		return nil, err
	}

	return &f, nil
}

// FactByID retrieves a row from 'public.facts' as a Fact.
//
// Generated from index 'facts_pkey'.
func FactByID(db XODB, id int) (*Fact, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, factstring, displayed ` +
		`FROM public.facts ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	f := Fact{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&f.ID, &f.Factstring, &f.Displayed)
	if err != nil {
		return nil, err
	}

	return &f, nil
}

