// Package quizzle-go contains the types for schema 'public'.
package quizzle-go

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"database/sql/driver"
	"encoding/csv"
	"errors"
	"fmt"
	"regexp"
	"strings"
	"time"
)

// Product represents a row from 'public.products'.
type Product struct {
	ID int `json:"id"` // id
	Name string `json:"name"` // name
	Price float64 `json:"price"` // price

	// xo fields
	_exists, _deleted bool

}


// Exists determines if the Product exists in the database.
func (p *Product) Exists() bool {
	return p._exists
}

// Deleted provides information if the Product has been deleted from the database.
func (p *Product) Deleted() bool {
	return p._deleted
}

// Insert inserts the Product to the database.
func (p *Product) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}


	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.products (` +
		`name, price` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, p.Name, p.Price)
	err = db.QueryRow(sqlstr, p.Name, p.Price).Scan(&p.ID)
	if err != nil {
		return err
	}


	// set existence
	p._exists = true

	return nil
}


	// Update updates the Product in the database.
	func (p *Product) Update(db XODB) error {
		var err error

		// if doesn't exist, bail
		if !p._exists {
			return errors.New("update failed: does not exist")
		}

		// if deleted, bail
		if p._deleted {
			return errors.New("update failed: marked for deletion")
		}

		// sql query
		const sqlstr = `UPDATE public.products SET (` +
			`name, price` +
			`) = ( ` +
			`$1, $2` +
			`) WHERE id = $3`

		// run query
		XOLog(sqlstr, p.Name, p.Price, p.ID)
		_, err = db.Exec(sqlstr, p.Name, p.Price, p.ID)
		return err
	}

	// Save saves the Product to the database.
	func (p *Product) Save(db XODB) error {
		if p.Exists() {
			return p.Update(db)
		}

		return p.Insert(db)
	}

	// Upsert performs an upsert for Product.
	//
	// NOTE: PostgreSQL 9.5+ only
	func (p *Product) Upsert(db XODB) error {
		var err error

		// if already exist, bail
		if p._exists {
			return errors.New("insert failed: already exists")
		}

		// sql query
		const sqlstr = `INSERT INTO public.products (` +
			`id, name, price` +
			`) VALUES (` +
			`$1, $2, $3` +
			`) ON CONFLICT (id) DO UPDATE SET (` +
			`id, name, price` +
			`) = (` +
			`EXCLUDED.id, EXCLUDED.name, EXCLUDED.price` +
			`)`

		// run query
		XOLog(sqlstr, p.ID, p.Name, p.Price)
		_, err = db.Exec(sqlstr, p.ID, p.Name, p.Price)
		if err != nil {
			return err
		}

		// set existence
		p._exists = true

		return nil
}


// Delete deletes the Product from the database.
func (p *Product) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.products WHERE id = $1`

	// run query
	XOLog(sqlstr, p.ID)
	_, err = db.Exec(sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// ProductByID retrieves a row from 'public.products' as a Product.
//
// Generated from index 'products_pkey'.
func ProductByID(db XODB, id int) (*Product, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, price ` +
		`FROM public.products ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	p := Product{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&p.ID, &p.Name, &p.Price)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

